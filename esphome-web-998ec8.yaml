esphome:
  name: esphome-web-998ec8
  includes:
    - veml7700_sensor.h
    - crc.h
    - r24avd1.h
    - r24avd1.cpp
  libraries:
    - SPI
    - Wire
    - adafruit/Adafruit BusIO @ 1.9.6
    - "https://github.com/adafruit/Adafruit_VEML7700"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:



wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-998Ec8"
    password: "ls1vrzRHbsy9"

captive_portal:
    
i2c:
  sda: 21
  scl: 22
  scan: true
#  id: bus_a
  frequency: 10000 Hz
  
    
sensor:
  - platform: custom
    lambda: |-
      auto my_sensor = new r24avd1::R24AVD1Component(id(radar_id));
      my_sensor->set_approach_sensor(id(approach_sensor_id));
      my_sensor->set_motion_binary_sensor(id(motion_uart));
      my_sensor->set_presence_binary_sensor(id(presence_uart));
      App.register_component(my_sensor);
      return {my_sensor->motion_amplitude};

    sensors:
    - name: "Movement sign"
      unit_of_measurement: '%'
      accuracy_decimals: 0
  - platform: custom
    lambda: |-
      auto veml7700 = new VEML7700CustomSensor();
      App.register_component(veml7700);
      return {veml7700->lux_sensor, veml7700->white_sensor, veml7700->als_sensor};
    sensors:
      - name: "VEML7700 Light" # Required dummy sensor
        unit_of_measurement: Lux
        accuracy_decimals: 0
      - name: "VEML770 White"
        unit_of_measurement: raw
        accuracy_decimals: 0
      - name: "VEML770 ALS"
        unit_of_measurement: raw
        accuracy_decimals: 0
  - platform: sht3xd
    temperature:
      name: "Temp"
      unit_of_measurement: "Â°C"
      icon: "mdi:water-percent"
      state_class: "measurement"
      accuracy_decimals: 1
      id: temp_sensor
    humidity:
      name: "Humidity"
    address: 0x44
    update_interval: 10s
  - platform: adc
    pin: 34
    name: "Soil Moisture"
    update_interval: 6s
    unit_of_measurement: "%"
    filters:
    - median:
        window_size: 7
        send_every: 4
        send_first_at: 1
    - calibrate_linear:
        - 91 -> 0.00
        - 100 -> 100.00
    - lambda: 
        if (x < 0) return 0; 
        else if (x > 100) return 100;
        else return (x);
    accuracy_decimals: 0
    


# NEW



binary_sensor:
  - platform: template
    name: "Presence"
    id: presence_uart
    device_class: presence
    filters:
      - delayed_on_off: 10ms
  - platform: template
    name: "Movement"
    id: motion_uart
    device_class: motion

select:
  - platform: template
    name: "Scene (0x04, 0x10)"
    id: select_scene
    options:
     - "Default (0x00)"
     - "Area detection (top mounted) (0x01)"
     - "Toilet (top mounted) (0x02)"
     - "Bedroom (top loading) (0x03)"
     - "Bedroom (top mounted) (0x04)"
     - "Bedroom (top mounted) (0x05)"
    initial_option: "Default (0x00)"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("packet", "select_scene: %s, %d", x.c_str(), i);
            unsigned char b[1] = {0};
            b[0] = i;
            crc::write_to_uart(0x02, 0x04, 0x10, b, 1, id(radar_id));

  - platform: template
    name: "Unmanned stall option"
    id: select_unmanned_stall
    options:
     - "no coersion - (0x00)"
     - "10s - (0X01)"
     - "30s - (0X02)"
     - "1min - (0X03)"
     - "2min - (0X04)"
     - "5min - (0X05)"
     - "10min - (0X06)"
     - "30min - (0X07)"
     - "60min - (0X08)"
    initial_option: "no coersion - (0x00)"
    optimistic: true

button:
  - platform: template
    name: Force unmanned stall
    id: unmanned_stall_button

    # Optional variables:
    # find more:
    # https://icon-sets.iconify.design/mdi/close-circle-outline/
    icon: "mdi:close-circle-outline"
    on_press:
      then:
        - lambda: |-
            ESP_LOGD("packet", "force_into_unmanned_stall: ");
            // this actuall reads whether there is an unmanned stall
            // crc::write_to_uart(read_command, system_parameter, force_into_unmanned_stall, NULL, 0, id(radar_id));
            unsigned char b[1] = {0};
            auto index = id(select_unmanned_stall).active_index();
            if (index) {
              b[0] = *index;
              crc::write_to_uart((unsigned char)crc::FunctionCode::WRITE_COMMAND, (unsigned char)crc::WriteAddressCode1::SYSTEM_PARAMETER, (unsigned char)crc::AddressCode2::FORCE_INTO_UNMANNED_STALL, b, 1, id(radar_id));
            }

number:
  - platform: template
    id: gear_threshold
    name: "Gear Threshold (0x04, 0x0C)"
    optimistic: true
    min_value: 1
    max_value: 10
    step: 1
    on_value:
      then:
        - lambda: |-
            unsigned char b[1] = {0};
            b[0] = id(gear_threshold).state;
            crc::write_to_uart((unsigned char)crc::FunctionCode::WRITE_COMMAND, (unsigned char)crc::WriteAddressCode1::SYSTEM_PARAMETER, (unsigned char)crc::AddressCode2::THRESHOLD_GEAR, b, 1, id(radar_id));



uart:
  id: radar_id
  tx_pin: 16
  rx_pin: 17
  baud_rate: 9600
  data_bits: 8
  parity: NONE
  stop_bits: 1
  debug:
    direction: BOTH
    dummy_receiver: false
    after:
      timeout: 0.01s
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

# IMPORTANT: needs to be here so that text_sensor is included in the build directory
text_sensor:
  platform: template
  id: approach_sensor_id
  name: "Approach"
