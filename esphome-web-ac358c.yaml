esphome:
  name: esphome-web-ac358c
  includes:
    - crc.h

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-Ac358C"
    password: "XtB9tpm6aSBQ"

captive_portal:
    
    
binary_sensor:
  - platform: gpio
    pin:
      number: 16
      mode:
        input: true
        pullup: false
    name: "Presence"
    device_class: presence
    filters:
      - delayed_on_off: 10ms
  - platform: gpio
    pin:
      number: 17
      mode:
        input: true
    name: "Movement"
    device_class: motion

select:
  - platform: template
    name: "Scene (0x04, 0x10)"
    id: select_scene
    options:
     - "Default (0x00)"
     - "Area detection (top mounted) (0x01)"
     - "Toilet (top mounted) (0x02)"
     - "Bedroom (top loading) (0x03)"
     - "Bedroom (top mounted) (0x04)"
     - "Bedroom (top mounted) (0x05)"
    initial_option: "Default (0x00)"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("packet", "select_scene: %s, %d", x.c_str(), i);
            unsigned char b[1] = {0};
            b[0] = i;
            write_to_uart(0x02, 0x04, 0x10, b, 1, id(radar_id));

  - platform: template
    name: "Unmanned stall option"
    id: select_unmanned_stall
    options:
     - "no coersion - (0x00)"
     - "10s - (0X01)"
     - "30s - (0X02)"
     - "1min - (0X03)"
     - "2min - (0X04)"
     - "5min - (0X05)"
     - "10min - (0X06)"
     - "30min - (0X07)"
     - "60min - (0X08)"
    initial_option: "no coersion - (0x00)"
    optimistic: true

button:
  - platform: template
    name: Force unmanned stall
    id: unmanned_stall_button

    # Optional variables:
    icon: "mdi:close-circle-outline"
    on_press:
      then:
        - lambda: |-
            ESP_LOGD("packet", "force_into_unmanned_stall: ");
            // this actuall reads whether there is an unmanned stall
            // write_to_uart(read_command, system_parameter, force_into_unmanned_stall, NULL, 0, id(radar_id));
            unsigned char b[1] = {0};
            auto index = id(select_unmanned_stall).active_index();
            if (index) {
              b[0] = *index;
              write_to_uart((unsigned char)function_code::write_command, (unsigned char)write_address_code_1::system_parameter, (unsigned char)address_code_2::force_into_unmanned_stall, b, 1, id(radar_id));
            }

number:
  - platform: template
    id: gear_threshold
    name: "Gear Threshold (0x04, 0x0C)"
    optimistic: true
    min_value: 1
    max_value: 10
    step: 1
    on_value:
      then:
        - lambda: |-
            unsigned char a[] = {0x01, 0x02};
            auto out = us_CalculateCrc16(a, 2);
            ESP_LOGD("crc", "out: %x", out);
            unsigned char b[1] = {0};
            b[0] = id(gear_threshold).state;
            unsigned char packet[100] = {0};
            unsigned short int packet_len = get_packet(0x02, 0x04, 0x0C, b, 1, packet, 100);
            ESP_LOGD("crc", "packet_len: %d", packet_len);
            unsigned short int ii = 0;
            for (ii = 0; ii < packet_len; ii++) {
              ESP_LOGD("packet", "ii: %d, %X", ii, packet[ii]);
            }
            id(radar_id).write_array(packet, packet_len);


uart:
  id: radar_id
  tx_pin: 14
  rx_pin: 27
  baud_rate: 9600
  data_bits: 8
  parity: NONE
  stop_bits: 1
  debug:
    direction: BOTH
    dummy_receiver: false
    after:
      timeout: 0.01s
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);



